// System Diagnostics Script - practical process execution examples

print("üîç System Diagnostics Starting...");

let report = "# üîç System Diagnostics Report\n\n";
report += "*Generated by Rhai Process Execution*\n\n";

report += "## üíª System Overview\n\n";

// Get basic system information using shell commands
let user = sh("whoami");
if user.len() > 1 {
    report += "- **Current User**: `" + user + "`\n";
} else {
    report += "- **Current User**: `[Command returned: '" + user + "']`\n";
}

let hostname = sh("hostname");  
if hostname.len() > 1 {
    report += "- **Hostname**: `" + hostname + "`\n";
} else {
    report += "- **Hostname**: `[Command returned: '" + hostname + "']`\n";
}

// Get current date/time (Windows)
let datetime = sh("echo %DATE% %TIME%");
if datetime.len() > 5 && datetime != "%DATE% %TIME%" {
    report += "- **Date/Time**: `" + datetime + "`\n";
} else {
    report += "- **Date/Time**: `[Command returned: '" + datetime + "']`\n";
}

// Get current directory (Windows)
let cd_result = sh("echo %CD%");
if cd_result.len() > 1 && cd_result != "%CD%" {
    report += "- **Working Directory**: `" + cd_result + "`\n";
} else {
    report += "- **Working Directory**: `[Command returned: '" + cd_result + "']`\n";
}

report += "\n## üåê Network Connectivity\n\n";

// Test network connectivity
let ping_targets = ["127.0.0.1", "8.8.8.8", "google.com"];

for target in ping_targets {
    report += "### Ping Test: " + target + "\n\n";
    
    // Use Windows ping syntax directly via shell
    let ping_result = sh("ping -n 2 " + target);
    
    if ping_result.contains("TTL=") || ping_result.contains("Reply from") {
        report += "‚úÖ **Status**: Connection successful\n";
        // Extract key statistics
        let lines = ping_result.split("\n");
        for line in lines {
            if line.contains("Average") || line.contains("Minimum") || line.contains("Maximum") {
                report += "- " + line + "\n";
            } else if line.contains("Reply from") {
                // Extract first reply line as example
                report += "- " + line + "\n";
                break;
            }
        }
    } else if ping_result.contains("could not find host") || ping_result.contains("unreachable") {
        report += "‚ùå **Status**: Host unreachable\n";
    } else if ping_result.contains("Request timed out") {
        report += "‚ö†Ô∏è **Status**: Request timed out\n";  
    } else {
        report += "‚ùå **Status**: Connection failed\n";
        report += "- **Output**: " + ping_result.sub_string(0, 100) + "...\n";
    }
    
    report += "\n";
}

report += "## üìÅ Disk Usage Analysis\n\n";

// Check disk usage
if command_exists("df") {
    let df_result = run_cmd("df -h");
    report += "### Unix Disk Usage\n\n";
    report += "```\n" + df_result + "\n```\n\n";
} else {
    // Try Windows disk usage commands
    let wmic_result = sh("wmic logicaldisk get size,freespace,caption");
    if wmic_result.len() > 20 && !wmic_result.contains("not recognized") && !wmic_result.contains("Invalid") {
        report += "### Windows Disk Usage\n\n";
        report += "```\n" + wmic_result + "\n```\n\n";
    } else {
        // Fallback to dir command for current drive (dir is a built-in Windows command)
        let dir_result = sh("dir /-c");
        if dir_result.len() > 10 && !dir_result.contains("not recognized") {
            report += "### Current Drive Space\n\n";
            let lines = dir_result.split("\n");
            let found_info = false;
            for line in lines {
                if line.contains("bytes free") || line.contains("File(s)") || line.contains("Dir(s)") {
                    if line.len() > 5 {
                        report += "- " + line + "\n";
                        found_info = true;
                    }
                }
            }
            if !found_info {
                report += "- Unable to parse disk usage information\n";
            }
            report += "\n";
        } else {
            report += "### Disk Usage\n\n";
            report += "- Unable to retrieve disk usage information\n\n";
        }
    }
}

report += "## üîÑ Running Processes\n\n";

// Show running processes (limited output)
if command_exists("ps") {
    let ps_result = run_cmd("ps aux");
    report += "### Process List (Top 10)\n\n";
    let lines = ps_result.split("\n");
    report += "```\n";
    for i in 0..min(10, lines.len()) {
        report += lines[i] + "\n";
    }
    if lines.len() > 10 {
        report += "... (" + (lines.len() - 10) + " more processes)\n";
    }
    report += "```\n\n";
} else if command_exists("tasklist") {
    let tasklist_result = sh("tasklist /fo csv");
    report += "### Windows Process List (Top 10)\n\n";
    let lines = tasklist_result.split("\n");
    report += "```\n";
    for i in 0..min(10, lines.len()) {
        report += lines[i] + "\n";
    }
    if lines.len() > 10 {
        report += "... (" + (lines.len() - 10) + " more processes)\n";
    }
    report += "```\n\n";
}

report += "## üîß System Configuration\n\n";

// Environment variables (selected)
if command_exists("env") {
    let env_result = run_cmd("env");
    let env_lines = env_result.split("\n");
    report += "### Key Environment Variables\n\n";
    
    let important_vars = ["PATH", "HOME", "USER", "SHELL", "LANG"];
    for line in env_lines {
        for env_var in important_vars {
            if line.starts_with(env_var + "=") {
                report += "- **" + env_var + "**: `" + line.sub_string(env_var.len() + 1, min(100, line.len() - env_var.len() - 1)) + "`\n";
                break;
            }
        }
    }
    report += "\n";
} else {
    // Windows environment variables
    let path_result = sh("echo %PATH%");
    if path_result != "%PATH%" {
        report += "### Windows Environment\n\n";
        report += "- **PATH**: `" + path_result.sub_string(0, min(200, path_result.len())) + "...`\n\n";
    }
}

report += "## üõ†Ô∏è Command Availability Summary\n\n";

let all_commands = ["ping", "ps", "df", "ls", "dir", "whoami", "hostname", "date", "pwd", "env", "tasklist"];
let available_count = 0;

report += "| Command | Available | Purpose |\n";
report += "|---------|-----------|----------|\n";

for cmd in all_commands {
    let available = command_exists(cmd);
    if available { available_count += 1; }
    let status = if available { "‚úÖ" } else { "‚ùå" };
    let purpose = if cmd == "ping" { "Network testing" }
        else if cmd == "ps" || cmd == "tasklist" { "Process listing" }
        else if cmd == "df" { "Disk usage" }
        else if cmd == "ls" || cmd == "dir" { "Directory listing" }
        else if cmd == "whoami" { "Current user" }
        else if cmd == "hostname" { "System hostname" }
        else if cmd == "date" { "System date/time" }
        else if cmd == "pwd" { "Working directory" }
        else if cmd == "env" { "Environment vars" }
        else { "System utility" };
    
    report += "| `" + cmd + "` | " + status + " | " + purpose + " |\n";
}

report += "\n**Command Availability**: " + available_count + "/" + all_commands.len() + " commands available\n\n";

report += "## üìä Diagnostic Summary\n\n";

report += "‚úÖ **System diagnostics completed successfully!**\n\n";
report += "**Report includes**:\n";
report += "- System identification and user information\n";
report += "- Network connectivity tests\n";
report += "- Disk usage analysis\n";
report += "- Running process overview\n";
report += "- System configuration details\n";
report += "- Command availability assessment\n\n";

report += "*This report was generated using Rhai process execution capabilities.*\n";

// Display the complete report
md(report);

print("üîç System diagnostics completed!");
